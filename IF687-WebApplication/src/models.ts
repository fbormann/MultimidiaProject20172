/**
 * Online Judge
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

export class Group {
    /**
     * Unique identifier representing a specific group.
     */
    '_id': string;

    /**
     * Name of the group.
     */
    'name': string;

    /**
     * Professors of group.
     */
    'professors': Array<User>;

    /**
     * Teaching asistants of group.
     */
    'teachingAssistants': Array<User>;

    /**
     * Students of group.
     */
    'students': Array<User>;

    /**
     * Problem sets of group.
     */
    'problemSets': Array<ProblemSet>;
}

export class GroupStatistics {
    /**
     * Group of statistics.
     */
    'group': Group;

    'language': ProblemStatisticsLanguage;

    'submission': ProblemStatisticsSubmission;

    'problem': ProblemStatisticsUser;

    'user': GroupStatisticsUser;
}

export class GroupStatisticsUser {
    'student': number;

    'teachingAssistant': number;

    'professor': number;
}

export class Problem {
    /**
     * Unique identifier representing a specific problem.
     */
    '_id': string;

    /**
     * Owner of problem.
     */
    'owner': User;

    /**
     * Is it a draft?
     */
    'draft': boolean;

    /**
     * Name of problem.
     */
    'name': string;

    /**
     * Description of problem.
     */
    'description': string;

    /**
     * Source of problem.
     */
    'source': string;

    /**
     * Input specification of problem.
     */
    'inputSpecification': string;

    /**
     * Input notes of problem.
     */
    'inputNotes': string;

    /**
     * Output specification of problem.
     */
    'outputSpecification': string;

    /**
     * Output notes of problem.
     */
    'outputNotes': string;

    /**
     * Time limit of problem in seconds.
     */
    'timeLimit': number;

    /**
     * Memory limit of problem in bytes.
     */
    'memoryLimit': number;

    /**
     * Output limit of problem in bytes.
     */
    'outputLimit': number;

    /**
     * Other limits of problem.
     */
    'otherLimits': string;

    /**
     * Test cases of problem.
     */
    'testCases': Array<TestCase>;
}

export class ProblemReport {
    /**
     * Name of the problem.
     */
    'name': string;

    /**
     * Names of students that solved this problem.
     */
    'solved': Array<string>;

    /**
     * Names of students that did not solve this problem.
     */
    'didNotSolve': Array<string>;

    /**
     * Names of stsudents that did not submit a solution to this problem.
     */
    'didNotSubmit': Array<string>;
}

export class ProblemSet {
    /**
     * Unique identifier representing a specific problem set.
     */
    '_id': string;

    /**
     * Name of the group.
     */
    'name': string;

    /**
     * Problems sets of problem sets.
     */
    'problems': Array<Problem>;

    /**
     * Begin of problem set.
     */
    'begin': Date;

    /**
     * End of problem set.
     */
    'end': Date;
}

export class ProblemSetReport {
    'problemReports': Array<ProblemReport>;

    'resolveramTodas': number;
}

export class ProblemSetStatistics {
    /**
     * Problem Set of statistics.
     */
    'problemSet': ProblemSet;

    'language': ProblemStatisticsLanguage;

    'submission': ProblemStatisticsSubmission;

    'problem': ProblemStatisticsUser;
}

export class ProblemStatistics {
    /**
     * Problem of statistics.
     */
    'problem': Problem;

    'language': ProblemStatisticsLanguage;

    'submission': ProblemStatisticsSubmission;

    'user': ProblemStatisticsUser;

    'submissions': ProblemStatisticsSubmissions;
}

export class ProblemStatisticsLanguage {
    'c': number;

    'cpp': number;

    'java': number;

    'py2': number;

    'py3': number;
}

export class ProblemStatisticsSubmission {
    'queued': number;

    'accepted': number;

    'compileError': number;

    'wrongAnswer': number;

    'runtimeError': number;

    'timeLimitExceeded': number;

    'memoryLimitExceeded': number;

    'outputLimitExceeded': number;

    'emptyOutput': number;

    'presentationError': number;

    'judgeError': number;
}

export class ProblemStatisticsSubmissions {
    'latest': Array<Submission>;

    'mostEfficient': Array<Submission>;
}

export class ProblemStatisticsUser {
    'succeeded': number;

    'failed': number;
}

export class Submission {
    /**
     * Unique identifier representing a specific submission.
     */
    '_id': string;

    /**
     * User of submission.
     */
    'user': User;

    /**
     * Problem of submission.
     */
    'problem': Problem;

    'dateTime': Date;

    /**
     * Language of submission.
     */
    'language': Submission.LanguageEnum;

    /**
     * Evaluation of submission.
     */
    'evaluation': Submission.EvaluationEnum;

    /**
     * Name of submission's file.
     */
    'fileName': string;

    /**
     * Source code of submission.
     */
    'sourceCode': string;
}

export namespace Submission {

    export enum LanguageEnum {
        C = 'C',
        Cpp = 'CPP',
        Java = 'JAVA',
        Py2 = 'PY2',
        Py3 = 'PY3',
    }

    export enum EvaluationEnum {
        Queued = 'QUEUED',
        Accepted = 'ACCEPTED',
        CompileError = 'COMPILE_ERROR',
        WrongAnswer = 'WRONG_ANSWER',
        RuntimeError = 'RUNTIME_ERROR',
        TimeLimitExceeded = 'TIME_LIMIT_EXCEEDED',
        MemoryLimitExceeded = 'MEMORY_LIMIT_EXCEEDED',
        OutputLimitExceeded = 'OUTPUT_LIMIT_EXCEEDED',
        EmptyOutput = 'EMPTY_OUTPUT',
        PresentationError = 'PRESENTATION_ERROR',
        JudgeError = 'JUDGE_ERROR',
    }
}

export class TestCase {
    /**
     * Unique identifier representing a specific test case.
     */
    '_id': string;

    /**
     * Problem of test case.
     */
    'problem': Problem;

    /**
     * Input of test case.
     */
    'input': string;

    /**
     * Output of test case.
     */
    'output': string;

    /**
     * Hint of test case.
     */
    'hint': string;

    /**
     * Is test case a sample?
     */
    'sample': boolean;
}

export class User {
    /**
     * Unique identifier representing a specific user.
     */
    '_id': string;

    /**
     * Name of user.
     */
    'name': string;

    /**
     * E-mail of user.
     */
    'email': string;

    /**
     * Image URL representing the user.
     */
    'picture': string;

    /**
     * Role of user.
     */
    'role': User.RoleEnum;
}

export namespace User {

    export enum RoleEnum {
        Student = 'STUDENT',
        TeachingAssistant = 'TEACHING_ASSISTANT',
        Professor = 'PROFESSOR',
    }
}
